# Default values for test-microservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.hub.docker.com/6745345/api2
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: 1.0

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 800

ingress:
  enabled: true
  annotations:
     kubernetes.io/ingress.class: nginx
     nginx.ingress.kubernetes.io/proxy-body-size: '0'
     nginx.ingress.kubernetes.io/proxy-connect-timeout: '600'
     nginx.ingress.kubernetes.io/proxy-read-timeout: '600'
     nginx.ingress.kubernetes.io/proxy-send-timeout: '600'
     nginx.ingress.kubernetes.io/rewrite-target: /$1
     kubernetes.io/tls-acme: "false"
     cert-manager.io/cluster-issuer: letsencrypt-staging
  hosts:
    - host: rest-api.sii.pl
      paths:
        - '/(.*)'
#  tls:
#    - secretName: rest-api.sii.pl-tls
#      hosts:
#        - rest-api.sii.pl

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

global:
  ingress:
    annotations: { }
    # Specifying an apiPath sets up path based routing rules to your services.
    # The generated paths follow the following format: /api/<domain>/<version>/<service>/
    #
    # Example: Adding an entry for routing auditing requests to two separate services
    # Backend services in this example are named auditing-example1 and auditing-example2
    # - domain: auditing
    #   version: v1
    #   services:
    #     - name: example1
    #       port: 80
    #     - name: example2
    #       port: 80
    # This will set up a path entry on the ingress
    # <base url>/api/auditing/v1/example1/ -> svc auditing-example1:80
    # <base url>/api/auditing/v1/example2/ -> svc auditing-example2:80
    apiPaths:
      - domain: rest
        version: v1
        services:
          - name: api
            port: 800


